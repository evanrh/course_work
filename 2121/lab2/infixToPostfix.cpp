/*
 * Evan Hastings
 * 9/11/2019
 * 2121-001
 * Lab 2
 */

#include <string>
#include <stack>
#include <iostream>

using namespace std;


//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols


// Counts number of left and right parentheses and returns true if they match
// and returns false otherwise
bool parenthesisCheck(string infix[], int length)	{
	int leftCount = 0;
	int rightCount = 0;
	
	// Loop through all chars in infixed list
	for(int i = 0; i < length; i++)	{
		if(infix[i] == "(")
			leftCount++;
		else if(infix[i] == ")")
			rightCount++;
		else
			continue;
	}
	
	// Check for same number of parentheses
	if(leftCount == rightCount)
		return true;
	else
		return false;

}

// Operator precedence check;
// Return > 0 if left is higher or < 0 if right is higher
// Return == 0 if precedence is the same
int precedence(string l, string r)	{

	// Method calling this function checks for return being < 0
	// It should stop at a (, so the return is > 0
	if(r == "(")
		return 1;
	
	// Temporary variable created to perform actions in loop twice
	string temp = l;
	int values[2];
	for(int i = 0; i <= 1; i++)	{
		if( i == 1)
			temp = r;

		if(temp.find_first_of("-+") != string::npos)
			values[i] = 0;

		else if(temp.find_first_of("%/*") != string::npos)
			values[i] = 1;
	}
	return(values[0] - values[1]);
}

int infixToPostfix(string infix[], int length, string postfix[])
{

	// If parenthesis aren't aligned correctly, returns 0
	if(!parenthesisCheck(infix, length))
		return 0;
	
	// Creation of stack and of postfix incrementer
	stack <string> ops;
	int pfInc = 0;

	// Loop through all elements of infixed array
	for(int i = 0; i < length; i ++)	{
		
		// Check for digit character
		if(infix[i].find_first_of("1234567890") != string::npos)
			postfix[pfInc++] = infix[i];
	
		// Check for left parenthesis
		else if(infix[i] == "(")
			ops.push(infix[i]);
		
		// Check for right parenthesis
		else if(infix[i] == ")")	{

			// Reverse loop popping all elements off operator stack until
			// left parenthesis reached
			while(ops.top() != "(")	{
				postfix[pfInc++] = ops.top();
				ops.pop();
			}

			// Pop left parenthesis off stack
			ops.pop();
		}
		
		// Check for operator character
		else if(infix[i].find_first_of("-+%/*") != string::npos)	{

			// If operators stack is empty, this value is pushed onto it
			if(ops.empty())
				ops.push(infix[i]);
			
			// Operator stack is not empty
			else {

				// value holds the result of the precedence check
				int value = precedence(infix[i], ops.top());
				
				// Loop through operators that are of lower priority than current
				while(value <= 0)	{
					postfix[pfInc++] = ops.top();
					ops.pop();
					
					// Check for left parenthesis or empty stack
					if(ops.empty() or ops.top() == "(")
						break;

					value = precedence(infix[i], ops.top());
				}

				// Push current operator onto stack
				ops.push(infix[i]);
			}
		}

		else
			continue;

	}
	
	// Addition of leftover operators from stack to postfix array
	while(!ops.empty())	{
		postfix[pfInc++] = ops.top();
		ops.pop();
	}

	// Postfix incrementer will be the size of the array
	return pfInc;
}

//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//            to 2 3 4 * + 5 6 - 7 + 8 * +
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
